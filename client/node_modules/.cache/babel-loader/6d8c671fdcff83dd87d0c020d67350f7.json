{"ast":null,"code":"import { all, takeLatest, call, put, select } from \"redux-saga/effects\";\nimport UserActionTypes from \"../user/user.types\";\nimport { clearCart } from \"./cart.actions\";\nimport { getUserCartRef } from \"../../firebase/firebase.utils\";\nimport { setCartFromFirebase } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { selectCurrentUser } from \"../user/user.selectors\";\nimport { selectCartItems } from \"./cart.selectors\";\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUserSignIn), call(onCartChange)]);\n}","map":{"version":3,"sources":["/Users/timothyyau/Desktop/crwn-clothing/crwn-clothing/client/src/redux/cart/cart.sagas.js"],"names":["all","takeLatest","call","put","select","UserActionTypes","clearCart","getUserCartRef","setCartFromFirebase","CartActionTypes","selectCurrentUser","selectCartItems","clearCartOnSignOut","checkCartFromFirebase","payload","user","cartRef","id","cartSnapshot","get","data","cartItems","updateCartInFirebase","currentUser","update","error","console","log","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,UAAd,EAA0BC,IAA1B,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMT,GAAG,CAACG,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUO,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACxD,QAAMC,OAAO,GAAG,MAAMT,cAAc,CAACQ,IAAI,CAACE,EAAN,CAApC;AACA,QAAMC,YAAY,GAAG,MAAMF,OAAO,CAACG,GAAR,EAA3B;AACA,QAAMhB,GAAG,CAACK,mBAAmB,CAACU,YAAY,CAACE,IAAb,GAAoBC,SAArB,CAApB,CAAT;AACD;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMC,WAAW,GAAG,MAAMnB,MAAM,CAACM,iBAAD,CAAhC;;AACA,MAAIa,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMP,OAAO,GAAG,MAAMT,cAAc,CAACgB,WAAW,CAACN,EAAb,CAApC;AACA,YAAMI,SAAS,GAAG,MAAMjB,MAAM,CAACO,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACQ,MAAR,CAAe;AAAEH,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOI,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACF;AAED,OAAO,UAAUG,gBAAV,GAA6B;AAClC,QAAM3B,UAAU,CAACI,eAAe,CAACwB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC9B,QAAM7B,UAAU,CAACI,eAAe,CAAC0B,eAAjB,EAAkClB,qBAAlC,CAAhB;AACD;AAED,OAAO,UAAUmB,YAAV,GAAyB;AAC9B,QAAM/B,UAAU,CACd,CACEQ,eAAe,CAACwB,QADlB,EAEExB,eAAe,CAACyB,WAFlB,EAGEzB,eAAe,CAAC0B,oBAHlB,CADc,EAMdb,oBANc,CAAhB;AAQD;AAED,OAAO,UAAUc,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CAACE,IAAI,CAAC0B,gBAAD,CAAL,EAAyB1B,IAAI,CAAC4B,YAAD,CAA7B,EAA6C5B,IAAI,CAAC8B,YAAD,CAAjD,CAAD,CAAT;AACD","sourcesContent":["import { all, takeLatest, call, put, select } from \"redux-saga/effects\";\nimport UserActionTypes from \"../user/user.types\";\nimport { clearCart } from \"./cart.actions\";\nimport { getUserCartRef } from \"../../firebase/firebase.utils\";\nimport { setCartFromFirebase } from \"./cart.actions\";\nimport CartActionTypes from \"./cart.types\";\nimport { selectCurrentUser } from \"../user/user.selectors\";\nimport { selectCartItems } from \"./cart.selectors\";\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nexport function* checkCartFromFirebase({ payload: user }) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\n\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({ cartItems });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\n\nexport function* onCartChange() {\n  yield takeLatest(\n    [\n      CartActionTypes.ADD_ITEM,\n      CartActionTypes.REMOVE_ITEM,\n      CartActionTypes.CLEAR_ITEM_FROM_CART,\n    ],\n    updateCartInFirebase\n  );\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onUserSignIn), call(onCartChange)]);\n}\n"]},"metadata":{},"sourceType":"module"}